{"ast":null,"code":"'use strict';\n\nconst IsIpfs = require('is-ipfs');\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst moduleConfig = require('../utils/module-config');\n\nconst cleanCID = require('../utils/clean-cid');\n\nmodule.exports = arg => {\n  const send = moduleConfig(arg);\n  const refs = promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = module.exports.normalizeOpts(opts);\n\n    try {\n      args = module.exports.checkArgs(args);\n    } catch (err) {\n      return callback(err);\n    }\n\n    const transform = (res, cb) => {\n      cb(null, res.map(r => ({\n        ref: r.Ref,\n        err: r.Err\n      })));\n    };\n\n    const request = {\n      args,\n      path: 'refs',\n      qs: opts\n    };\n    send(request, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, transform, callback);\n    });\n  });\n  refs.local = require('./refs-local')(arg);\n  refs.localReadableStream = require('./refs-local-readable-stream')(arg);\n  refs.localPullStream = require('./refs-local-pull-stream')(arg);\n  return refs;\n};\n\nmodule.exports.checkArgs = args => {\n  const isArray = Array.isArray(args);\n  args = isArray ? args : [args];\n  const res = [];\n\n  for (let arg of args) {\n    try {\n      arg = cleanCID(arg);\n    } catch (err) {\n      if (!IsIpfs.ipfsPath(arg)) {\n        throw err;\n      }\n    }\n\n    res.push(arg);\n  }\n\n  return isArray ? res : res[0];\n};\n\nmodule.exports.normalizeOpts = opts => {\n  opts = opts || {};\n\n  if (typeof opts.maxDepth === 'number') {\n    opts['max-depth'] = opts.maxDepth;\n  }\n\n  return opts;\n};","map":null,"metadata":{},"sourceType":"script"}