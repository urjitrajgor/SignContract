{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashes');\n\nconst assert = require('assert'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, multihash) {\n    assert(multihash, 'A link requires a multihash to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name;\n    this._size = size;\n\n    if (typeof multihash === 'string') {\n      this._multihash = mh.fromB58String(multihash);\n    } else if (Buffer.isBuffer(multihash)) {\n      this._multihash = multihash;\n    }\n  }\n\n  toString() {\n    const mhStr = mh.toB58String(this.multihash);\n    return \"DAGLink <\".concat(mhStr, \" - name: \\\"\").concat(this.name, \"\\\", size: \").concat(this.size, \">\");\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      size: this.size,\n      multihash: mh.toB58String(this._multihash)\n    };\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get multihash() {\n    return this._multihash;\n  }\n\n  set multihash(multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\");\n  }\n\n}\n\nexports = module.exports = DAGLink;\nexports.create = require('./create');\nexports.util = require('./util');","map":null,"metadata":{},"sourceType":"script"}