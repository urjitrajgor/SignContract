{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst ConcatStream = require('concat-stream');\n\nconst once = require('once');\n\nconst isStream = require('is-stream');\n\nconst OtherBuffer = require('buffer').Buffer;\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nconst SendFilesStream = require('../utils/send-files-stream');\n\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  return promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    options.converter = FileResultStreamConverter;\n    const ok = Buffer.isBuffer(_files) || isStream.readable(_files) || Array.isArray(_files) || OtherBuffer.isBuffer(_files) || typeof _files === 'object';\n\n    if (!ok) {\n      return callback(new Error('first arg must be a buffer, readable stream, an object or array of objects'));\n    }\n\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n};","map":null,"metadata":{},"sourceType":"script"}