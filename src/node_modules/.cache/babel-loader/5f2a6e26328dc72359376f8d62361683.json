{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nmodule.exports = send => {\n  return promisify((cid, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser vs node\n      if (!Array.isArray(res)) {\n        res = [res];\n      }\n\n      let responses = [];\n      res.forEach(result => {\n        // 4 = Provider\n        if (result.Type !== 4) return;\n        result.Responses.forEach(response => {\n          const peerInfo = new PeerInfo(PeerId.createFromB58String(response.ID));\n\n          if (response.Addrs) {\n            response.Addrs.forEach(addr => {\n              const ma = multiaddr(addr);\n              peerInfo.multiaddrs.add(ma);\n            });\n          }\n\n          responses.push(peerInfo);\n        });\n      });\n      callback(null, responses);\n    };\n\n    send({\n      path: 'dht/findprovs',\n      args: cid.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}