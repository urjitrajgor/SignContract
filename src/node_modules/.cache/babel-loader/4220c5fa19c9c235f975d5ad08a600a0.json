{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nmodule.exports = send => {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const verbose = opts.v || opts.verbose;\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const peerInfo = parsePeersResponse(verbose, response);\n      callback(null, peerInfo);\n    });\n  });\n};\n\nfunction parsePeersResponse(verbose, response) {\n  // go-ipfs <= 0.4.4\n  if (Array.isArray(response.Strings)) {\n    return response.Strings.map(parseLegacyPeer.bind(null, verbose));\n  } // go-ipfs >= 0.4.5\n\n\n  if (Array.isArray(response.Peers)) {\n    return response.Peers.map(parsePeer.bind(null, verbose));\n  }\n\n  return [];\n}\n\nfunction parseLegacyPeer(verbose, peer) {\n  const res = {};\n\n  try {\n    if (verbose) {\n      const parts = peer.split(' ');\n      res.addr = multiaddr(parts[0]);\n      res.latency = parts[1];\n    } else {\n      res.addr = multiaddr(peer);\n    }\n\n    res.peer = PeerId.createFromB58String(res.addr.getPeerId());\n  } catch (error) {\n    res.error = error;\n    res.rawPeerInfo = peer;\n  }\n\n  return res;\n}\n\nfunction parsePeer(verbose, peer) {\n  const res = {};\n\n  try {\n    res.addr = multiaddr(peer.Addr);\n    res.peer = PeerId.createFromB58String(peer.Peer);\n    res.muxer = peer.Muxer;\n  } catch (error) {\n    res.error = error;\n    res.rawPeerInfo = peer;\n  }\n\n  if (peer.Latency) {\n    res.latency = peer.Latency;\n  }\n\n  if (peer.Streams) {\n    res.streams = peer.Streams;\n  }\n\n  return res;\n}","map":null,"metadata":{},"sourceType":"script"}