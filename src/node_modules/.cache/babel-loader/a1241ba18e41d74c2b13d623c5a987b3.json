{"ast":null,"code":"var _jsxFileName = \"/home/urjit/Documents/Blockchain/Etherium/SignContract/src/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Container, Form, Button, Table } from 'react-bootstrap';\nimport web3 from './web3';\nimport $ from 'jquery';\nimport ipfs from './ipfs';\nimport storehash from './contracts/Verification.json';\n\nconst contract = require('truffle-contract');\n\nvar Instance = contract(storehash);\nInstance.setProvider(web3.currentProvider);\nvar ContractInstance = Instance.deployed();\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      account: '0x0',\n      loading: true,\n      msg: '0x0',\n      signature: '0x0',\n      web3: null,\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropogation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState = {\n        buffer\n      };\n    };\n\n    this.onclick = async () => {\n      try {\n        this.setState({\n          blockNumber: 'Waiting...',\n          gasUsed: 'waiting...'\n        });\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        });\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      const ethAddress = await ContractInstance.address;\n      this.setState({\n        ethAddress\n      });\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash);\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        });\n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({\n            transactionHash\n          });\n        });\n      });\n    };\n  }\n\n  /*componentDidMount = async () => {\n    try{\n      $(\"#loader\").show();\n      $(\"#content\").hide();\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const account = accounts[0];\n      this.setState({web3: web3, account}, this.getData);      \n    }\n    catch(error){\n      console.log(error)\n    }\n  }\n   getData = async => {\n    console.log(\"getData\");\n      const {account, loading} = this.state ;   \n      console.log(\"account:\"+ account + \"loadin:\"+ loading);\n      if(loading){\n        $(\"#loader\").hide();\n        $(\"#content\").show();\n      }\n  }\n  \n  signMessage = async => {\n    alert(\"SignMessage\");\n    $(\"#loader\").show();\n    $(\"#content\").hide();\n    const {web3, account } = this.state;\n    const message = web3.utils.sha3($(\"#message\").val());\n    console.log(web3.currentProvider);\n     web3.currentProvider.sendAsync({\n      method: 'personal_sign',\n      params: [\n        message,\n        account\n      ],\n      from: account,\n    }, function (err, res) {\n      alert(err);\n      this.setState({signature: res, msg: message});      \n      $(\"#msg\").html(\"message:\"+ '' + message);\n      $(\"#signature\").html(\"signature:\"+ '' + res);\n      \n      $(\"#loader\").hide();\n      $(\"#content\").show();\n    });   \n  }*/\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"IPFS APP\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \" Choose file to send to IPFS \"), React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Button, {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Send it\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \" Get Transaction Receipt \"), React.createElement(Table, {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.ethAddress)), \"                  \", React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Tx Hash # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, this.state.transactionHash)), \"                  \", React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Block Number # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.blockNumber)), \"                  \", React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Gas Used\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.state.gasUsed))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/urjit/Documents/Blockchain/Etherium/SignContract/src/src/App.js"],"names":["React","Component","Container","Form","Button","Table","web3","$","ipfs","storehash","contract","require","Instance","setProvider","currentProvider","ContractInstance","deployed","App","state","account","loading","msg","signature","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropogation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onclick","eth","getTransactionReceipt","err","console","log","error","onSubmit","accounts","getAccounts","address","add","hash","methods","sendHash","send","render","onClick"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nimport {Container, Form, Button, Table} from 'react-bootstrap' ;\nimport web3 from './web3';\nimport $ from 'jquery';\nimport ipfs from './ipfs';\nimport storehash from './contracts/Verification.json';\n\nconst contract = require('truffle-contract');\nvar Instance = contract(storehash);\nInstance.setProvider(web3.currentProvider);\nvar ContractInstance = Instance.deployed();\n\nclass App extends Component {\n\n  state = {\n      account: '0x0',\n      loading: true,\n      msg: '0x0',\n      signature: '0x0',\n      web3: null,\n      ipfsHash: null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    }  \n\n\n    captureFile =(event) => {\n      event.stopPropogation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    convertToBuffer = async(reader) => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState = ({buffer});\n    };\n\n    onclick = async () => {\n      try {\n        this.setState({blockNumber: 'Waiting...', gasUsed: 'waiting...'});\n        await web3.eth.getTransactionReceipt(this.state.transactionHash,(err,txReceipt) => {console.log(err,txReceipt);\n          this.setState({txReceipt});\n        });\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n      }\n      catch(error){\n        console.log(error);\n      }\n    }\n\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      const ethAddress = await ContractInstance.address;\n      this.setState({ethAddress});\n    \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash);\n        this.setState({ipfsHash: ipfsHash[0].hash});\n      \n\n      storehash.methods.sendHash(this.state.ipfsHash).send({from: accounts[0]}, (error, transactionHash) => {\n        console.log(transactionHash);\n        this.setState({transactionHash});\n      });\n    })\n  }\n  /*componentDidMount = async () => {\n    try{\n      $(\"#loader\").show();\n      $(\"#content\").hide();\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const account = accounts[0];\n      this.setState({web3: web3, account}, this.getData);      \n    }\n    catch(error){\n      console.log(error)\n    }\n  }\n\n  getData = async => {\n    console.log(\"getData\");\n      const {account, loading} = this.state ;   \n      console.log(\"account:\"+ account + \"loadin:\"+ loading);\n      if(loading){\n        $(\"#loader\").hide();\n        $(\"#content\").show();\n      }\n  }\n  \n  signMessage = async => {\n    alert(\"SignMessage\");\n    $(\"#loader\").show();\n    $(\"#content\").hide();\n    const {web3, account } = this.state;\n    const message = web3.utils.sha3($(\"#message\").val());\n    console.log(web3.currentProvider);\n\n    web3.currentProvider.sendAsync({\n      method: 'personal_sign',\n      params: [\n        message,\n        account\n      ],\n      from: account,\n    }, function (err, res) {\n      alert(err);\n      this.setState({signature: res, msg: message});      \n      $(\"#msg\").html(\"message:\"+ '' + message);\n      $(\"#signature\").html(\"signature:\"+ '' + res);\n      \n      $(\"#loader\").hide();\n      $(\"#content\").show();\n    });   \n  }*/\n\n  render() {\n    \n  return (\n    <div className=\"App\">\n      <header >\n      <title>IPFS APP</title>\n      </header>\n      <hr/>\n\n      <Container>\n          <h3> Choose file to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input \n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button bsStyle=\"primary\" type=\"submit\"> \n                Send it \n             </Button>\n          </Form><hr/>\n          <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n          <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>                  <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>                  <tr>\n                    <td>Block Number # </td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>\n                \n                </tbody>\n            </Table>\n      </Container>\n     \n\n\n      {/* <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" >Ethereum Signatures</a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap\">\n            <small><a className=\"nav-link\" >Your Account: <div id=\"account\" ><span >{this.state.account}</span></div></a></small>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10\">\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap pt-3 pb-2 mb-3 border-bottom\" style={{marginTop: '40px'}}>\n              <div id=\"loader\">\n                <p className=\"text-center\">Loading...</p>\n              </div>\n              <div id=\"content\" className=\"col-lg-9\" style={{display: 'none'}}>\n                <h2>Sign a Message</h2>\n                <p>Sign a message from your account with the form below and broadcast it to the blockchain!</p>\n                <form  className=\"\" ref= \"myForm\" role=\"form\" onSubmit={this.signMessage}>\n                  <div className=\"form-group\">\n                    <input id=\"message\" className=\"form-control\" type=\"text\"></input>\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">Sign & Send</button>\n                </form>\n                <p id=\"msg\">{this.msg}</p>\n                <p id=\"signature\">{this.signature}</p>\n                <button id=\"verify\" className=\"btn btn-primary\" style={{display: 'none'}}> Verify Signature</button>\n                <p id=\"address\"></p>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>*/}\n    </div> \n  );\n  }\n}  \nexport default App;\n"]},"metadata":{},"sourceType":"module"}