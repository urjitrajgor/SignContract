{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst parseUrl = require('url').parse;\n\nconst request = require('../utils/request');\n\nconst SendOneFile = require('../utils/send-one-file-multiple-results');\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'add');\n  return promisify((url, opts, callback) => {\n    if (typeof opts === 'function' && callback === undefined) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (!validUrl(url)) {\n      return callback(new Error('\"url\" param must be an http(s) url'));\n    }\n\n    requestWithRedirect(url, opts, sendOneFile, callback);\n  });\n};\n\nconst validUrl = url => typeof url === 'string' && url.startsWith('http');\n\nconst requestWithRedirect = (url, opts, sendOneFile, callback) => {\n  request(parseUrl(url).protocol)(url, res => {\n    res.once('error', callback);\n\n    if (res.statusCode >= 400) {\n      return callback(new Error(\"Failed to download with \".concat(res.statusCode)));\n    }\n\n    const redirection = res.headers.location;\n\n    if (res.statusCode >= 300 && res.statusCode < 400 && redirection) {\n      if (!validUrl(redirection)) {\n        return callback(new Error('redirection url must be an http(s) url'));\n      }\n\n      requestWithRedirect(redirection, opts, sendOneFile, callback);\n    } else {\n      const requestOpts = {\n        qs: opts,\n        converter: FileResultStreamConverter\n      };\n      sendOneFile(res, requestOpts, callback);\n    }\n  }).end();\n};","map":null,"metadata":{},"sourceType":"script"}