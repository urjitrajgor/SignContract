{"ast":null,"code":"var _jsxFileName = \"/home/urjit/Documents/Blockchain/Etherium/SignContract/src/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Form, Button, Table } from 'react-bootstrap';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './contracts/Verification.json';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      account: '0x0',\n      loading: true,\n      msg: '0x0',\n      signature: '0x0',\n      web3: null,\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        var contract = require('truffle-contract');\n\n        var Instance = contract(storehash);\n        Instance.setProvider(web3.currentProvider);\n        this.setState({\n          ethAddress: '0xE2553736f9FEd68Ab8Bb7A311cdE5217592A59F7'\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      const bfr = await Buffer.from(reader.result);\n      console.log(bfr);\n      this.setState({\n        buffer: bfr\n      });\n    };\n\n    this.onClick = async event => {\n      event.preventDefault();\n\n      try {\n        this.setState({\n          blockNumber: 'Waiting...',\n          gasUsed: 'waiting...'\n        });\n        console.log(this.state.transactionHash);\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        });\n        console.log(this.state.txReceipt.blockNumber);\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        });\n        const Hash = new web3.eth.Contract(storehash.abi, '0xE2553736f9FEd68Ab8Bb7A311cdE5217592A59F7');\n        Hash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          this.setState({\n            transactionHash\n          });\n        });\n      });\n    };\n  }\n\n  /*componentDidMount = async () => {\n    try{\n      $(\"#loader\").show();\n      $(\"#content\").hide();\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const account = accounts[0];\n      this.setState({web3: web3, account}, this.getData);      \n    }\n    catch(error){\n      console.log(error)\n    }\n  }\n   getData = async => {\n    console.log(\"getData\");\n      const {account, loading} = this.state ;   \n      console.log(\"account:\"+ account + \"loadin:\"+ loading);\n      if(loading){\n        $(\"#loader\").hide();\n        $(\"#content\").show();\n      }\n  }\n  \n  signMessage = async => {\n    alert(\"SignMessage\");\n    $(\"#loader\").show();\n    $(\"#content\").hide();\n    const {web3, account } = this.state;\n    const message = web3.utils.sha3($(\"#message\").val());\n    console.log(web3.currentProvider);\n     web3.currentProvider.sendAsync({\n      method: 'personal_sign',\n      params: [\n        message,\n        account\n      ],\n      from: account,\n    }, function (err, res) {\n      alert(err);\n      this.setState({signature: res, msg: message});      \n      $(\"#msg\").html(\"message:\"+ '' + message);\n      $(\"#signature\").html(\"signature:\"+ '' + res);\n      \n      $(\"#loader\").hide();\n      $(\"#content\").show();\n    });   \n  }*/\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"IPFS APP\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \" Choose file to send to IPFS \"), React.createElement(\"div\", {\n      class: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Send it\")))), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" Get Transaction Receipt \"), React.createElement(Table, {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.state.ethAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Tx Hash #\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.state.transactionHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Block Number #\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.state.blockNumber)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Gas Used\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.state.gasUsed))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/urjit/Documents/Blockchain/Etherium/SignContract/src/src/App.js"],"names":["React","Component","Container","Form","Button","Table","web3","ipfs","storehash","App","state","account","loading","msg","signature","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","componentDidMount","contract","require","Instance","setProvider","currentProvider","setState","error","console","log","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","bfr","Buffer","from","result","onClick","eth","getTransactionReceipt","err","onSubmit","accounts","getAccounts","add","hash","Hash","Contract","abi","methods","sendHash","send","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Form, Button, Table} from 'react-bootstrap';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './contracts/Verification.json';\n\n\nclass App extends Component {\n  state = {\n      account: '0x0',\n      loading: true,\n      msg: '0x0',\n      signature: '0x0',\n      web3: null,\n      ipfsHash: null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    }  \n\n    componentDidMount = async () => {\n      try{\n        var contract = require('truffle-contract');\n        var Instance = contract(storehash);\n        Instance.setProvider(web3.currentProvider);        \n        this.setState({ethAddress: '0xE2553736f9FEd68Ab8Bb7A311cdE5217592A59F7' })\n      }\n\n      catch(error){\n        console.log(error)\n      }\n    }\n\n    captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)\n    };\n\n    convertToBuffer = async(reader) => {\n      const bfr = await Buffer.from(reader.result);\n      console.log(bfr);\n      this.setState({buffer: bfr});\n    };\n\n    onClick = async (event) => {\n      event.preventDefault();\n      try {\n        this.setState({blockNumber: 'Waiting...', gasUsed: 'waiting...'});\n        console.log(this.state.transactionHash);\n        await web3.eth.getTransactionReceipt(this.state.transactionHash,(err,txReceipt) => {console.log(err,txReceipt);\n          this.setState({txReceipt});\n        });\n        console.log(this.state.txReceipt.blockNumber);\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n      }\n      catch(error){\n        console.log(error);\n      }\n    }\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n      const accounts = await web3.eth.getAccounts();\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        this.setState({ipfsHash: ipfsHash[0].hash});      \n        const Hash = new web3.eth.Contract(storehash.abi, '0xE2553736f9FEd68Ab8Bb7A311cdE5217592A59F7')  \n        Hash.methods.sendHash(this.state.ipfsHash).send({from: accounts[0]}, (error, transactionHash) => {\n          this.setState({transactionHash});\n        });\n      })\n    }\n  /*componentDidMount = async () => {\n    try{\n      $(\"#loader\").show();\n      $(\"#content\").hide();\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const account = accounts[0];\n      this.setState({web3: web3, account}, this.getData);      \n    }\n    catch(error){\n      console.log(error)\n    }\n  }\n\n  getData = async => {\n    console.log(\"getData\");\n      const {account, loading} = this.state ;   \n      console.log(\"account:\"+ account + \"loadin:\"+ loading);\n      if(loading){\n        $(\"#loader\").hide();\n        $(\"#content\").show();\n      }\n  }\n  \n  signMessage = async => {\n    alert(\"SignMessage\");\n    $(\"#loader\").show();\n    $(\"#content\").hide();\n    const {web3, account } = this.state;\n    const message = web3.utils.sha3($(\"#message\").val());\n    console.log(web3.currentProvider);\n\n    web3.currentProvider.sendAsync({\n      method: 'personal_sign',\n      params: [\n        message,\n        account\n      ],\n      from: account,\n    }, function (err, res) {\n      alert(err);\n      this.setState({signature: res, msg: message});      \n      $(\"#msg\").html(\"message:\"+ '' + message);\n      $(\"#signature\").html(\"signature:\"+ '' + res);\n      \n      $(\"#loader\").hide();\n      $(\"#content\").show();\n    });   \n  }*/\n\n  render() {\n    \n  return (\n    <div className=\"App\">\n      <header >\n      <title>IPFS APP</title>\n      </header>\n      <hr/>\n      <Container>\n          <h3> Choose file to send to IPFS </h3>\n          <div class=\"card\">\n            <div class=\"card-header\">\n              <Form onSubmit={this.onSubmit} >\n                <input \n                  type = \"file\"\n                  onChange = {this.captureFile}\n                />\n                <Button variant=\"primary\" type=\"submit\"> \n                    Send it \n                </Button>\n              </Form>\n            </div>\n          </div><hr/>\n          <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n          <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>Tx Hash #</td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>                  \n                  <tr>\n                    <td>Block Number #</td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>                  \n                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>                \n                </tbody>\n            </Table>\n      </Container>\n     \n\n\n      {/* <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" >Ethereum Signatures</a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap\">\n            <small><a className=\"nav-link\" >Your Account: <div id=\"account\" ><span >{this.state.account}</span></div></a></small>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10\">\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap pt-3 pb-2 mb-3 border-bottom\" style={{marginTop: '40px'}}>\n              <div id=\"loader\">\n                <p className=\"text-center\">Loading...</p>\n              </div>\n              <div id=\"content\" className=\"col-lg-9\" style={{display: 'none'}}>\n                <h2>Sign a Message</h2>\n                <p>Sign a message from your account with the form below and broadcast it to the blockchain!</p>\n                <form  className=\"\" ref= \"myForm\" role=\"form\" onSubmit={this.signMessage}>\n                  <div className=\"form-group\">\n                    <input id=\"message\" className=\"form-control\" type=\"text\"></input>\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">Sign & Send</button>\n                </form>\n                <p id=\"msg\">{this.msg}</p>\n                <p id=\"signature\">{this.signature}</p>\n                <button id=\"verify\" className=\"btn btn-primary\" style={{display: 'none'}}> Verify Signature</button>\n                <p id=\"address\"></p>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>*/}\n    </div> \n  );\n  }\n}  \nexport default App;\n"]},"metadata":{},"sourceType":"module"}