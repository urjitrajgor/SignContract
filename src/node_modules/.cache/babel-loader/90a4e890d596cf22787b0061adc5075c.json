{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst _require = require('ipld-dag-pb'),\n      DAGNode = _require.DAGNode,\n      DAGLink = _require.DAGLink;\n\nconst CID = require('cids');\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = new LRU(lruOptions);\n\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    let cidB58Str;\n\n    try {\n      cid = new CID(cid);\n      cidB58Str = cid.toBaseEncodedString();\n    } catch (err) {\n      return callback(err);\n    }\n\n    const node = cache.get(cidB58Str);\n\n    if (node) {\n      return callback(null, node);\n    }\n\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const links = result.Links.map(l => new DAGLink(l.Name, l.Size, l.Hash));\n      const node = DAGNode.create(Buffer.from(result.Data, 'base64'), links);\n      cache.set(cidB58Str, node);\n      callback(null, node);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}