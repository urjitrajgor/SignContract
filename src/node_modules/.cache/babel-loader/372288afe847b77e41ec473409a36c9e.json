{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst multibase = require('multibase');\n\nconst CID = require('cids');\n\nmodule.exports = send => {\n  return promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.cidBase) {\n      opts['cid-base'] = opts.cidBase;\n      delete opts.cidBase;\n    }\n\n    const transform = (res, callback) => {\n      if (!opts['cid-base']) {\n        return callback(null, res.Path);\n      } // FIXME: remove when go-ipfs supports ?cid-base for /api/v0/resolve\n      // https://github.com/ipfs/go-ipfs/pull/5777#issuecomment-439838555\n\n\n      const parts = res.Path.split('/'); // ['', 'ipfs', 'QmHash', ...]\n\n      if (multibase.isEncoded(parts[2]) !== opts['cid-base']) {\n        try {\n          let cid = new CID(parts[2]);\n\n          if (cid.version === 0 && opts['cid-base'] !== 'base58btc') {\n            cid = cid.toV1();\n          }\n\n          parts[2] = cid.toBaseEncodedString(opts['cid-base']);\n          res.Path = parts.join('/');\n        } catch (err) {\n          return callback(err);\n        }\n      }\n\n      callback(null, res.Path);\n    };\n\n    send.andTransform({\n      path: 'resolve',\n      args: args,\n      qs: opts\n    }, transform, callback);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}