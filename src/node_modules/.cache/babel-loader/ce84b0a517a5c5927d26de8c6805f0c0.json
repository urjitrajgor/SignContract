{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst _require = require('ipld-dag-pb'),\n      DAGNode = _require.DAGNode;\n\nconst SendOneFile = require('../utils/send-one-file');\n\nconst once = require('once');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'object/put');\n  return promisify((obj, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = {};\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    let tmpObj = {\n      Data: null,\n      Links: []\n    };\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        };\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: obj.Data.toString(),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString();\n      tmpObj.Links = obj.Links;\n    } else {\n      return callback(new Error('obj not recognized'));\n    }\n\n    let buf;\n\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj;\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj));\n    }\n\n    const enc = options.enc || 'json';\n    const sendOptions = {\n      qs: {\n        inputenc: enc\n      }\n    };\n    sendOneFile(buf, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err); // early\n      }\n\n      callback(null, new CID(result.Hash));\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}